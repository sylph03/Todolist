import React, { useCallback, useEffect, useRef, useState } from 'react'
import BoardActions from '~/components/Layout/BoardActions'
import TaskColumn from '~/components/Layout/TaskColumn'
import TaskCard from '~/components/Layout/TaskCard'
import { DndContext, useSensor, useSensors, DragOverlay, defaultDropAnimationSideEffects, closestCorners, pointerWithin, getFirstCollision } from '@dnd-kit/core'
import { MouseSensor, TouchSensor } from '~/libs/DndKitSensors'
import { SortableContext, horizontalListSortingStrategy, arrayMove } from '@dnd-kit/sortable'
import { cloneDeep, isEmpty } from 'lodash'
import { generatePlaceholderCard } from '~/utils/formatters'

const ACIVE_DRAG_ITEM_TYPE = {
  COLUMN: 'ACIVE_DRAG_ITEM_TYPE_COLUMN',
  CARD: 'ACIVE_DRAG_ITEM_TYPE_CARD'
}

const BoardContent = ({ board, isSidebarOpen, moveColumns, moveCardInTheSameColumn, moveCardToDifferentColumn }) => {
  // const pointerSensor = useSensor(PointerSensor, { activationConstraint: { distance: 10 } })
  // Y√™u c·∫ßu chu·ªôt di chuy·ªÉn 10 pixel tr∆∞·ªõc khi k√≠ch ho·∫°t k√©o th·∫£
  const mouseSensor = useSensor(MouseSensor, { activationConstraint: { distance: 10 } })
  // Nh·∫•n gi·ªØ 250ms v√† dung sai c·ªßa c·∫£m ·ª©ng 5px th√¨ k√≠ch ho·∫°t event
  const touchSensor = useSensor(TouchSensor, { activationConstraint: { delay: 250, tolerance: 5 } })
  // ∆Øu ti√™n s·ª≠ d·ª•ng 2 lo·∫°i sensors l√† mouse v√† touch ƒë·ªÉ c√≥ tr·∫£i nghi·ªám tr√™n mobile t·ªët nh·∫•t, kh√¥ng b·ªã bug
  // const sensors = useSensors(pointerSensor)
  const sensors = useSensors(mouseSensor, touchSensor)
  const [orderedColumns, setOrderedColumns] = useState([])
  // M·ªôt th·ªùi ƒëi·ªÉm ch·ªâ c√≥ m·ªôt ph·∫ßn t·ª≠ column ho·∫∑c card ƒë∆∞·ª£c k√©o
  const [activeDragItemId, setActiveDragItemId] = useState(null)
  const [activeDragItemType, setActiveDragItemType] = useState(null)
  const [activeDragItemData, setActiveDragItemData] = useState(null)
  const [oldColumnDraggingCard, setOldColumnDraggingCard] = useState(null)

  // ƒêi·ªÉm va ch·∫°m cu·ªëi c√πng (x·ª≠ l√Ω thu·∫≠t to√°n va ch·∫°m)
  const lastOverId = useRef(null)

  useEffect(() => {
    // Columns ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp ·ªü component cha cao nh·∫•t (boards/_id.jsx)
    setOrderedColumns(board.columns)
  }, [board])

  // T√¨m column theo cardId
  const findColumnByCardId = (cardId) => {
    // N√™n d√πng cardId thay v√¨ cardOrderIds b·ªüi v√¨ ·ªü b∆∞·ªõc handleDragOver s·∫Ω l√†m d·ªØ li·ªáu cho cards ho√†n ch·ªânh tr∆∞·ªõc r·ªìi m·ªõi t·∫°o ra cardOderIds m·ªõi
    return orderedColumns.find(column => column?.cards?.map(card => card._id)?.includes(cardId))
  }

  // Function chung x·ª≠ l√Ω c·∫≠p nh·∫≠t l·∫°i state trong tr∆∞·ªùng h·ª£p di chuy·ªÉn Card gi·ªØa c√°c column kh√°c nhau
  const moveCardBeetweenDifferentColumns = (overColumn, overCardId, active, over, aciveColumn, activeDraggingCardId, activeDraggingCardData, triggerFrom) => {

    let nextColumnsSnapshot = null

    setOrderedColumns(prevColumns => {
      // T√¨m v·ªã tr√≠ c·ªßa overCard trong column ƒë√≠ch ƒë∆∞·ª£c th·∫£
      const overCardIndex = overColumn?.cards?.findIndex(card => card._id === overCardId)

      // Logic t√≠nh to√°n cardIndex m·ªõi (tr√™n ho·∫∑c d∆∞·ªõi overCard)
      let newCardIndex
      const isBelowOverItem = active.rect.current?.translated && active.rect.current.translated.top > over.rect.top + over.rect.height
      const modifier = isBelowOverItem ? 1 : 0
      newCardIndex = overCardIndex >= 0 ? overCardIndex + modifier : overColumn?.cards?.length + 1

      // Clone m·∫£ng OderedColumnsState c≈© ra m·ªôt c√°i m·ªõi ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu r·ªìi return ƒë·ªÉ c·∫≠p nh·∫≠t OrderedColumnsState m·ªõi
      const nextColumns = cloneDeep(prevColumns)
      const nextActiveColumn = nextColumns.find(column => column._id === aciveColumn._id)
      const nextOverColumn = nextColumns.find(column => column._id === overColumn._id)

      if (nextActiveColumn) {
        // X√≥a card ·ªü column ƒëang active
        nextActiveColumn.cards = nextActiveColumn.cards.filter(card => card._id !== activeDraggingCardId)
        // Th√™m Placehoder Card n·∫øu column r·ªóng (do k√©o h·∫øt card ƒëi)
        if (isEmpty(nextActiveColumn.cards)) {
          nextActiveColumn.cards = [generatePlaceholderCard(nextActiveColumn)]
        }
        // C·∫≠p nh·∫≠t l·∫°i m·∫£ng cardOrderIds
        nextActiveColumn.cardOrderIds = nextActiveColumn.cards.map(card => card._id)
      }

      if (nextOverColumn) {
        // Ki·ªÉm tra card ƒëang k√©o c√≥ t·ªìn t·∫°i ·ªü Overcolumn ch∆∞a, n·∫øu c√≥ th√¨ c·∫ßn x√≥a n√≥ tr∆∞·ªõc
        nextOverColumn.cards = nextOverColumn.cards.filter(card => card._id !== activeDraggingCardId)
        // Khi dragEnd th√¨ ph·∫£i c·∫≠p nh·∫≠t l·∫°i chu·∫©n d·ªØ li·ªáu columnId trong card sau khi k√©o card gi·ªØa 2 column kh√°c nhau
        const rebuild_activateDraggingCardData = {
          ...activeDraggingCardData,
          columnId: nextOverColumn._id
        }
        // Th√™m card ƒëang k√©o v√†o overColumn theo v·ªã tr√≠ index m·ªõi
        nextOverColumn.cards = nextOverColumn.cards.toSpliced(newCardIndex, 0, rebuild_activateDraggingCardData)
        // X√≥a Placeholder Card n·∫øu ƒëang t·ªìn t·∫°i
        nextOverColumn.cards = nextOverColumn.cards.filter(card => !card.FE_PlaceholderCard)
        // C·∫≠p nh·∫≠t l·∫°i m·∫£ng cardOrderIds
        nextOverColumn.cardOrderIds = nextOverColumn.cards.map(card => card._id)
      }

      // ƒêo·∫°n code n√†y ƒëang ƒë∆∞·ª£c g·ªçi b√™n trong h√†m setOrderedColumns, ƒëi·ªÅu n√†y vi ph·∫°m nguy√™n t·∫Øc c·ªßa React v√¨:
      // Khi g·ªçi setOrderedColumns, React ƒëang trong qu√° tr√¨nh render
      // Trong khi ƒë√≥, moveCardToDifferentColumn l·∫°i c·∫≠p nh·∫≠t state c·ªßa component cha (Board)
      // React kh√¥ng cho ph√©p c·∫≠p nh·∫≠t state c·ªßa component cha trong khi ƒëang render component con
      // if (triggerFrom === 'handleDragEnd') {
      //   moveCardToDifferentColumn(activeDraggingCardId, oldColumnDraggingCard._id, nextOverColumn._id, nextColumns)
      // }

      nextColumnsSnapshot = nextColumns

      return nextColumns
    })

    // üëâ G·ªçi h√†m sau khi state set xong, tr√°nh vi ph·∫°m lu·∫≠t render
    if (triggerFrom === 'handleDragEnd') {
      setTimeout(() => {
        moveCardToDifferentColumn(activeDraggingCardId, oldColumnDraggingCard._id, overColumn._id, nextColumnsSnapshot)
      }, 0)
    }
  }

  const handleDragStart = (event) => {
    setActiveDragItemId(event?.active?.id)
    setActiveDragItemType(event?.active?.data?.current?.columnId ? ACIVE_DRAG_ITEM_TYPE.CARD : ACIVE_DRAG_ITEM_TYPE.COLUMN)
    setActiveDragItemData(event?.active?.data?.current)

    if (event?.active?.data?.current?.columnId) {
      setOldColumnDraggingCard(findColumnByCardId(event?.active?.id))
    }
  }

  // Qu√° tr√¨nh k√©o m·ªôt ph·∫ßn t·ª≠
  const handleDragOver = (event) => {
    // Kh√¥ng l√†m g√¨ th√™m n·∫øu k√©o column
    if (activeDragItemType === ACIVE_DRAG_ITEM_TYPE.COLUMN) return

    // X·ª≠ l√Ω th√™m n·∫øu k√©o card qua l·∫°i gi·ªØa c√°c column
    const { active, over } = event

    if (!active || !over) return

    const { id: activeDraggingCardId, data: { current: activeDraggingCardData } } = active
    const { id: overCardId } = over

    // T√¨m 2 column theo cardId
    const activeColumn = findColumnByCardId(activeDraggingCardId)
    const overColumn = findColumnByCardId(overCardId)

    // Kh√¥ng t·ªìn t·∫°i card trong column th√¨ kh√¥ng l√†m g√¨ h·∫øt
    if (!activeColumn || !overColumn) return

    // X·ª≠ l√Ω logic k√©o card nh∆∞ng ch∆∞a th·∫£ qua 2 column kh√°c nhau
    if (activeColumn._id !== overColumn._id) {
      moveCardBeetweenDifferentColumns(overColumn, overCardId, active, over, activeColumn, activeDraggingCardId, activeDraggingCardData, 'handleDragOver')
    }

  }

  const handleDragEnd = (event) => {
    // console.log('handle drag end: ', event)
    const { active, over } = event

    // Ki·ªÉm tra t·ªìn t·∫°i c·ªßa over (k√©o linh tinh ra ngo√†i th√¨ return tr√°nh l·ªói)
    if (!active || !over) return

    // X·ª≠ l√Ω th·∫£ card
    if (activeDragItemType === ACIVE_DRAG_ITEM_TYPE.CARD) {
      const { id: activeDraggingCardId, data: { current: activeDraggingCardData } } = active
      const { id: overCardId } = over

      // T√¨m 2 column theo cardId
      const activeColumn = findColumnByCardId(activeDraggingCardId)
      const overColumn = findColumnByCardId(overCardId)

      // Kh√¥ng t·ªìn t·∫°i card trong column th√¨ kh√¥ng l√†m g√¨ h·∫øt
      if (!activeColumn || !overColumn) return
      // K√©o th·∫£ card gi·ªØa 2 column kh√°c nhau
      if (oldColumnDraggingCard._id !== overColumn._id) {
        moveCardBeetweenDifferentColumns(overColumn, overCardId, active, over, activeColumn, activeDraggingCardId, activeDraggingCardData, 'handleDragEnd')
      } else {
        // Th·∫£ card trong c√πng column
        const oldCardIndex = oldColumnDraggingCard?.cards?.findIndex(card => card._id === activeDragItemId)
        const newCardIndex = overColumn?.cards?.findIndex(column => column._id === overCardId)
        const dndOrderedCards = arrayMove(oldColumnDraggingCard?.cards, oldCardIndex, newCardIndex)
        const dndOrderedCardsIds = dndOrderedCards.map(card => card._id)

        // G·ªçi state ƒë·ªÉ tr√°nh delay ho·∫∑c flickering giao di·ªán l√∫c k√©o th·∫£ c·∫ßn ph·∫£i ch·ªù g·ªçi API
        setOrderedColumns(prevColumns => {
          const nextColumns = cloneDeep(prevColumns)
          // T√¨m t·ªõi c√°i column m√† ƒëang th·∫£
          const targetColumn = nextColumns.find(column => column._id === overColumn._id)
          // C·∫≠p nh·∫≠t l·∫°i 2 gi√° tr·ªã m·ªõi l√† card v√† cardOderIds trong targetColumn
          targetColumn.cards = dndOrderedCards
          targetColumn.cardOrderIds = dndOrderedCardsIds

          return nextColumns
        })

        moveCardInTheSameColumn(dndOrderedCards, dndOrderedCardsIds, oldColumnDraggingCard._id)
      }
    }
    // X·ª≠ l√Ω th·∫£ column
    if (activeDragItemType === ACIVE_DRAG_ITEM_TYPE.COLUMN) {
      // Khi 2 v·ªã tr√≠ k√©o th·∫£ kh√°c nhau
      if (active.id != over.id) {
        const oldColumnIndex = orderedColumns.findIndex(column => column._id === active.id)
        const newColumnIndex = orderedColumns.findIndex(column => column._id === over.id)

        // S·ª≠ d·ª•ng arrayMove ƒë·ªÉ s·∫Øp x·∫øp l·∫°i m·∫£ng ban ƒë·∫ßu
        const dndOrderedColumns = arrayMove(orderedColumns, oldColumnIndex, newColumnIndex)

        moveColumns(dndOrderedColumns)

        // Tr√°nh delay giao di·ªán khi g·ªçi API
        setOrderedColumns(dndOrderedColumns)
      }
    }

    setActiveDragItemId(null)
    setActiveDragItemType(null)
    setActiveDragItemData(null)
    setOldColumnDraggingCard(null)
  }

  const dropAnimation = {
    sideEffects: defaultDropAnimationSideEffects({
      styles: {
        active: {
          opacity: '0.5'
        }
      }
    })
  }

  // Custom thu·∫≠t to√°n va ch·∫°m. args = arguments = c√°c ƒë·ªëi s·ªë, tham s·ªë
  const collisionDetectionStrategy = useCallback((args) => {
    // K√©o column th√¨ tr·∫£ v·ªÅ thu·∫≠t to√°n closestCorners
    if (activeDragItemType === ACIVE_DRAG_ITEM_TYPE.COLUMN) {
      return closestCorners({ ...args })
    }

    // T√¨m ƒëi·ªÉm giao nhau, va ch·∫°m, tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c va ch·∫°m - intersections v·ªõi con tr·ªè
    const pointerIntersections = pointerWithin(args)

    // N·∫øu pointerIntersections l√† m·∫£ng r·ªóng, return lu√¥n kh√¥ng l√†m g√¨ h·∫øt
    if (!pointerIntersections?.length) return

    // Thu·∫≠t to√°n ph√°t hi·ªán va ch·∫°m s·∫Ω tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c va ch·∫°m ·ªü ƒë√¢y - Kh√¥ng c·∫ßn b∆∞·ªõc n√†y n·ªØa
    // const intersections = !!pointerIntersections?.length ? pointerIntersections : rectIntersection(args)

    // T√¨m  overId ƒë·∫ßu ti√™n ·ªü trong pointerIntersections ·ªü tr√™n
    let overId = getFirstCollision(pointerIntersections, 'id')
    if (overId) {
      const checkColumn = orderedColumns.find(column => column._id === overId)
      if (checkColumn) {
        overId = closestCorners({
          ...args,
          droppableContainers: args.droppableContainers.filter(container => {
            return (container.id !== overId) && (checkColumn?.cardOrderIds?.includes(container.id))
          })
        })[0]?.id
      }

      lastOverId.current = overId
      return [{ id: overId }]
    }

    // OverId l√† null th√¨ tr·∫£ v·ªÅ m·∫£ng r·ªóng tr√°nh bug crash trang
    return lastOverId.current ? [{ id: lastOverId.current }] : []
  }, [activeDragItemType, orderedColumns])

  return (
    // sensor: C·∫£m bi·∫øn, collisionDetection: Thu·∫≠t to√°n ph√°t hi·ªán va ch·∫°m, flickering: collisionDetection={closestCorners} + sai l·ªách d·ªØ li·ªáu
    <DndContext onDragStart={handleDragStart} onDragOver={handleDragOver} onDragEnd={handleDragEnd} sensors={sensors} collisionDetection={collisionDetectionStrategy}>
      <div className='w-full h-HEIGHT_BOARD_CONTENT'>
        <div className={`${isSidebarOpen ? 'ml-ML_BOARD_CONTENT' : 'ml-4'} h-full p-SPACE_BOARD_CONTENT text-white dark:bg-gray-700 bg-sky-200 transition-all duration-300 flex flex-col gap-5 md:gap-SPACE_BOARD_CONTENT overflow-y-hidden overflow-x-auto max-w-full`}>
          <BoardActions />
          <SortableContext items={orderedColumns?.map(column => column._id)} strategy={horizontalListSortingStrategy}>
            <div className="flex gap-5 md:gap-SPACE_BOARD_CONTENT h-HEIGHT_BOARD_COLUMN min-w-full w-fit">
              {orderedColumns?.map(column => (
                <TaskColumn key={column._id} column={column}/>
              ))}
            </div>
          </SortableContext>
          <DragOverlay dropAnimation={dropAnimation}>
            { !activeDragItemType && null }
            { (activeDragItemType === ACIVE_DRAG_ITEM_TYPE.COLUMN) && <TaskColumn column={activeDragItemData} cursor={'cursor-grabbing'}/> }
            { (activeDragItemType === ACIVE_DRAG_ITEM_TYPE.CARD) && <TaskCard card={activeDragItemData}/> }
          </DragOverlay>
        </div>
      </div>
    </DndContext>
  )
}

export default BoardContent